// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"context"
	"sync"
)

// Ensure, that listIndexerMock does implement listIndexer.
// If this is not the case, regenerate this file with moq.
var _ listIndexer = &listIndexerMock{}

// listIndexerMock is a mock implementation of listIndexer.
//
//	func TestSomethingThatUseslistIndexer(t *testing.T) {
//
//		// make and configure a mocked listIndexer
//		mockedlistIndexer := &listIndexerMock{
//			IndexNewListFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the IndexNewList method")
//			},
//		}
//
//		// use mockedlistIndexer in code that requires listIndexer
//		// and then make assertions.
//
//	}
type listIndexerMock struct {
	// IndexNewListFunc mocks the IndexNewList method.
	IndexNewListFunc func(contextMoqParam context.Context, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// IndexNewList holds details about calls to the IndexNewList method.
		IndexNewList []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockIndexNewList sync.RWMutex
}

// IndexNewList calls IndexNewListFunc.
func (mock *listIndexerMock) IndexNewList(contextMoqParam context.Context, s string) error {
	if mock.IndexNewListFunc == nil {
		panic("listIndexerMock.IndexNewListFunc: method is nil but listIndexer.IndexNewList was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockIndexNewList.Lock()
	mock.calls.IndexNewList = append(mock.calls.IndexNewList, callInfo)
	mock.lockIndexNewList.Unlock()
	return mock.IndexNewListFunc(contextMoqParam, s)
}

// IndexNewListCalls gets all the calls that were made to IndexNewList.
// Check the length with:
//
//	len(mockedlistIndexer.IndexNewListCalls())
func (mock *listIndexerMock) IndexNewListCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockIndexNewList.RLock()
	calls = mock.calls.IndexNewList
	mock.lockIndexNewList.RUnlock()
	return calls
}
